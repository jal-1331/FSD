{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jalpa\\\\OneDrive\\\\Desktop\\\\FSD\\\\frontend\\\\src\\\\Components\\\\EventDetails\\\\EventDetails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './EventDetails.css';\nimport Head from '../Head/Head';\nimport EventCard from '../EventCard/EventCard';\n// EventCard component for displaying an event in a card format\n\n// EventDetails component that fetches data and displays it using multiple EventCards\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetails = () => {\n  _s();\n  const [eventData, setEventData] = useState([{\n    eventName: 'Default Event 1',\n    eventDescription: 'Default Description 1',\n    date: '2024-01-01',\n    startTime: '12:00 PM',\n    endTime: '1:00 PM',\n    location: 'Default Location 1',\n    organizerName: 'Default Organizer 1',\n    organizerContact: 'Default Contact 1',\n    registrationDeadline: '2023-12-31',\n    socialMediaLinks: 'https://example.com/default-event-1'\n  }, {\n    eventName: 'Default Event 2',\n    eventDescription: 'Default Description 2',\n    date: '2024-02-01',\n    startTime: '2:00 PM',\n    endTime: '3:00 PM',\n    location: 'Default Location 2',\n    organizerName: 'Default Organizer 2',\n    organizerContact: 'Default Contact 2',\n    registrationDeadline: '2023-12-31',\n    socialMediaLinks: 'https://example.com/default-event-2'\n  }, {\n    eventName: 'Default Event 1',\n    eventDescription: 'Default Description 1',\n    date: '2024-01-01',\n    startTime: '12:00 PM',\n    endTime: '1:00 PM',\n    location: 'Default Location 1',\n    organizerName: 'Default Organizer 1',\n    organizerContact: 'Default Contact 1',\n    registrationDeadline: '2023-12-31',\n    socialMediaLinks: 'https://example.com/default-event-1'\n  }\n  // Add more default events as needed\n  ]);\n\n  // Assuming a fictional function to fetch event data from a database\n  const fetchEventDataFromDatabase = async () => {\n    try {\n      // Perform the actual fetch operation here (e.g., using fetch or Axios)\n      // Replace this with your database fetch logic\n      const response = await fetch('/api/getEventData');\n      const data = await response.json();\n\n      // Assuming the data is an array of events\n      setEventData(data);\n    } catch (error) {\n      console.error('Error fetching event data:', error.message);\n    }\n  };\n  useEffect(() => {\n    // Fetch event data when the component mounts\n    fetchEventDataFromDatabase();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full\",\n    children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), eventData.map((event, index) => /*#__PURE__*/_jsxDEV(EventCard, {\n      event: event\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(EventDetails, \"L9fYEXWgzEYLc2FYAVzTK5TFcnQ=\");\n_c = EventDetails;\nexport default EventDetails;\nvar _c;\n$RefreshReg$(_c, \"EventDetails\");","map":{"version":3,"names":["React","useState","useEffect","Head","EventCard","jsxDEV","_jsxDEV","EventDetails","_s","eventData","setEventData","eventName","eventDescription","date","startTime","endTime","location","organizerName","organizerContact","registrationDeadline","socialMediaLinks","fetchEventDataFromDatabase","response","fetch","data","json","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","index","_c","$RefreshReg$"],"sources":["C:/Users/jalpa/OneDrive/Desktop/FSD/frontend/src/Components/EventDetails/EventDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './EventDetails.css'\r\nimport Head from '../Head/Head';\r\nimport EventCard from '../EventCard/EventCard'\r\n// EventCard component for displaying an event in a card format\r\n\r\n\r\n// EventDetails component that fetches data and displays it using multiple EventCards\r\nconst EventDetails = () => {\r\n  const [eventData, setEventData] = useState([\r\n    {\r\n      eventName: 'Default Event 1',\r\n      eventDescription: 'Default Description 1',\r\n      date: '2024-01-01',\r\n      startTime: '12:00 PM',\r\n      endTime: '1:00 PM',\r\n      location: 'Default Location 1',\r\n      organizerName: 'Default Organizer 1',\r\n      organizerContact: 'Default Contact 1',\r\n      registrationDeadline: '2023-12-31',\r\n      socialMediaLinks: 'https://example.com/default-event-1',\r\n    },\r\n    {\r\n      eventName: 'Default Event 2',\r\n      eventDescription: 'Default Description 2',\r\n      date: '2024-02-01',\r\n      startTime: '2:00 PM',\r\n      endTime: '3:00 PM',\r\n      location: 'Default Location 2',\r\n      organizerName: 'Default Organizer 2',\r\n      organizerContact: 'Default Contact 2',\r\n      registrationDeadline: '2023-12-31',\r\n      socialMediaLinks: 'https://example.com/default-event-2',\r\n    },\r\n    {\r\n        eventName: 'Default Event 1',\r\n        eventDescription: 'Default Description 1',\r\n        date: '2024-01-01',\r\n        startTime: '12:00 PM',\r\n        endTime: '1:00 PM',\r\n        location: 'Default Location 1',\r\n        organizerName: 'Default Organizer 1',\r\n        organizerContact: 'Default Contact 1',\r\n        registrationDeadline: '2023-12-31',\r\n        socialMediaLinks: 'https://example.com/default-event-1',\r\n      }\r\n    // Add more default events as needed\r\n  ]);\r\n\r\n  // Assuming a fictional function to fetch event data from a database\r\n  const fetchEventDataFromDatabase = async () => {\r\n    try {\r\n      // Perform the actual fetch operation here (e.g., using fetch or Axios)\r\n      // Replace this with your database fetch logic\r\n      const response = await fetch('/api/getEventData');\r\n      const data = await response.json();\r\n\r\n      // Assuming the data is an array of events\r\n      setEventData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching event data:', error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch event data when the component mounts\r\n    fetchEventDataFromDatabase();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='full' >\r\n        <Head/>\r\n      <h1>Event Details</h1>\r\n      {eventData.map((event, index) => (\r\n        <EventCard key={index} event={event} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventDetails;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAC3B,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,SAAS,MAAM,wBAAwB;AAC9C;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CACzC;IACEU,SAAS,EAAE,iBAAiB;IAC5BC,gBAAgB,EAAE,uBAAuB;IACzCC,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAE,UAAU;IACrBC,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,oBAAoB;IAC9BC,aAAa,EAAE,qBAAqB;IACpCC,gBAAgB,EAAE,mBAAmB;IACrCC,oBAAoB,EAAE,YAAY;IAClCC,gBAAgB,EAAE;EACpB,CAAC,EACD;IACET,SAAS,EAAE,iBAAiB;IAC5BC,gBAAgB,EAAE,uBAAuB;IACzCC,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAE,SAAS;IACpBC,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,oBAAoB;IAC9BC,aAAa,EAAE,qBAAqB;IACpCC,gBAAgB,EAAE,mBAAmB;IACrCC,oBAAoB,EAAE,YAAY;IAClCC,gBAAgB,EAAE;EACpB,CAAC,EACD;IACIT,SAAS,EAAE,iBAAiB;IAC5BC,gBAAgB,EAAE,uBAAuB;IACzCC,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAE,UAAU;IACrBC,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,oBAAoB;IAC9BC,aAAa,EAAE,qBAAqB;IACpCC,gBAAgB,EAAE,mBAAmB;IACrCC,oBAAoB,EAAE,YAAY;IAClCC,gBAAgB,EAAE;EACpB;EACF;EAAA,CACD,CAAC;;EAEF;EACA,MAAMC,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7C,IAAI;MACF;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;MACjD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAElC;MACAf,YAAY,CAACc,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D;EACF,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd;IACAmB,0BAA0B,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA;IAAKuB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACjBxB,OAAA,CAACH,IAAI;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACT5B,OAAA;MAAAwB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBzB,SAAS,CAAC0B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC1B/B,OAAA,CAACF,SAAS;MAAagC,KAAK,EAAEA;IAAM,GAApBC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAtEID,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAwElB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}