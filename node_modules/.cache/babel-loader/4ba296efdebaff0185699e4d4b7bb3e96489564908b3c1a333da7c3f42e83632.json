{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jalpa\\\\OneDrive\\\\Desktop\\\\FSD\\\\frontend\\\\src\\\\App.js\";\nimport './App.css';\nimport Login from './Components/Login/Login';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Event from './Components/Event/Event';\nimport Profile from './Components/Profile/Profile';\nimport EventDetails from './Components/EventDetails/EventDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/EventDetails\",\n          element: /*#__PURE__*/_jsxDEV(EventDetails, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Event\",\n          element: /*#__PURE__*/_jsxDEV(Event, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Profile\",\n          element: /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import { CssBaseline, Grid } from '@material-ui/core';\n// import { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\n// import Header from './Components/Header/Header';\n// import List from './Components/List/List';\n// import Map from './Components/Map/Map';\n\n// const App = () => {\n//   console.log(getWeatherData);\n//   const [type, setType] = useState('restaurants');\n//   const [rating, setRating] = useState('');\n\n//   const [coords, setCoords] = useState({});\n//   const [bounds, setBounds] = useState(null);\n\n//   const [weatherData, setWeatherData] = useState([]);\n//   const [filteredPlaces, setFilteredPlaces] = useState([]);\n//   const [places, setPlaces] = useState([]);\n\n//   const [autocomplete, setAutocomplete] = useState(null);\n//   const [childClicked, setChildClicked] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n//       setCoords({ lat: latitude, lng: longitude });\n//     });\n//   }, []);\n\n//  // ... (previous code)\n\n// useEffect(() => {\n//     const filtered = places?.filter((place) => Number(place.rating) > rating);\n//     setFilteredPlaces(filtered || []);\n//   }, [rating, places]);\n\n//   useEffect(() => {\n//     if (bounds && coords.lat && coords.lng) {\n//       setIsLoading(true);\n\n//       getWeatherData(coords.lat, coords.lng).then((data) => setWeatherData(data));\n\n//       getPlacesData(type, bounds.sw, bounds.ne).then((data) => {\n//         const validPlaces = data.filter((place) => place.name && place.num_reviews > 0);\n//         setPlaces(validPlaces);\n//         setFilteredPlaces([]);\n//         setRating('');\n//         setIsLoading(false);\n//       });\n//     }\n//   }, [bounds, type, coords]);\n\n//   // ... (remaining code)\n\n//   const onLoad = (autoC) => setAutocomplete(autoC);\n\n//   const onPlaceChanged = () => {\n//     const lat = autocomplete.getPlace().geometry.location.lat();\n//     const lng = autocomplete.getPlace().geometry.location.lng();\n//     setCoords({ lat, lng });\n//   };\n\n//   return (\n//     <>\n//       <CssBaseline />\n//       <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\n//       <Grid container spacing={3} style={{ width: '100%' }}>\n//         <Grid item xs={12} md={4}>\n//           <List\n//             isLoading={isLoading}\n//             childClicked={childClicked}\n//             places={filteredPlaces.length ? filteredPlaces : places}\n//             type={type}\n//             setType={setType}\n//             rating={rating}\n//             setRating={setRating}\n//           />\n//         </Grid>\n//         <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n//           <Map\n//             setChildClicked={setChildClicked}\n//             setBounds={setBounds}\n//             setCoords={setCoords}\n//             coords={coords}\n//             places={filteredPlaces.length ? filteredPlaces : places}\n//             weatherData={weatherData}\n//           />\n//         </Grid>\n//       </Grid>\n//     </>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Login","BrowserRouter","Router","Route","Routes","Event","Profile","EventDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jalpa/OneDrive/Desktop/FSD/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport Login from './Components/Login/Login';\nimport { BrowserRouter as Router, Route,Routes} from 'react-router-dom';\nimport Event from './Components/Event/Event';\nimport Profile from './Components/Profile/Profile';\n\nimport EventDetails from './Components/EventDetails/EventDetails';\n\nfunction App() {\n    return (\n        <>\n        <Router>\n        <Routes>\n        <Route path=\"/\" element={<Login/>} />  \n        <Route path=\"/login\" element={<Login/>} />\n        <Route path=\"/EventDetails\" element={<EventDetails/>}/>\n        <Route path=\"/Event\" element={<Event/>}/>\n        <Route path=\"/Profile\" element={<Profile/>}/>\n\n        </Routes>\n      </Router>  \n\n      \n\n      {/* <Test/> */}\n  \n      </>    \n    );\n}\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { CssBaseline, Grid } from '@material-ui/core';\n// import { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\n// import Header from './Components/Header/Header';\n// import List from './Components/List/List';\n// import Map from './Components/Map/Map';\n\n// const App = () => {\n//   console.log(getWeatherData);\n//   const [type, setType] = useState('restaurants');\n//   const [rating, setRating] = useState('');\n\n//   const [coords, setCoords] = useState({});\n//   const [bounds, setBounds] = useState(null);\n\n//   const [weatherData, setWeatherData] = useState([]);\n//   const [filteredPlaces, setFilteredPlaces] = useState([]);\n//   const [places, setPlaces] = useState([]);\n\n//   const [autocomplete, setAutocomplete] = useState(null);\n//   const [childClicked, setChildClicked] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n//       setCoords({ lat: latitude, lng: longitude });\n//     });\n//   }, []);\n\n//  // ... (previous code)\n\n// useEffect(() => {\n//     const filtered = places?.filter((place) => Number(place.rating) > rating);\n//     setFilteredPlaces(filtered || []);\n//   }, [rating, places]);\n  \n//   useEffect(() => {\n//     if (bounds && coords.lat && coords.lng) {\n//       setIsLoading(true);\n  \n//       getWeatherData(coords.lat, coords.lng).then((data) => setWeatherData(data));\n  \n//       getPlacesData(type, bounds.sw, bounds.ne).then((data) => {\n//         const validPlaces = data.filter((place) => place.name && place.num_reviews > 0);\n//         setPlaces(validPlaces);\n//         setFilteredPlaces([]);\n//         setRating('');\n//         setIsLoading(false);\n//       });\n//     }\n//   }, [bounds, type, coords]);\n  \n//   // ... (remaining code)\n  \n//   const onLoad = (autoC) => setAutocomplete(autoC);\n\n//   const onPlaceChanged = () => {\n//     const lat = autocomplete.getPlace().geometry.location.lat();\n//     const lng = autocomplete.getPlace().geometry.location.lng();\n//     setCoords({ lat, lng });\n//   };\n\n//   return (\n//     <>\n//       <CssBaseline />\n//       <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\n//       <Grid container spacing={3} style={{ width: '100%' }}>\n//         <Grid item xs={12} md={4}>\n//           <List\n//             isLoading={isLoading}\n//             childClicked={childClicked}\n//             places={filteredPlaces.length ? filteredPlaces : places}\n//             type={type}\n//             setType={setType}\n//             rating={rating}\n//             setRating={setRating}\n//           />\n//         </Grid>\n//         <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n//           <Map\n//             setChildClicked={setChildClicked}\n//             setBounds={setBounds}\n//             setCoords={setCoords}\n//             coords={coords}\n//             places={filteredPlaces.length ? filteredPlaces : places}\n//             weatherData={weatherData}\n//           />\n//         </Grid>\n//       </Grid>\n//     </>\n//   );\n// };\n\n// export default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,MAAM,0BAA0B;AAC5C,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAACC,MAAM,QAAO,kBAAkB;AACvE,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,OAAO,MAAM,8BAA8B;AAElD,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElE,SAASC,GAAGA,CAAA,EAAG;EACX,oBACIH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACAJ,OAAA,CAACP,MAAM;MAAAW,QAAA,eACPJ,OAAA,CAACL,MAAM;QAAAS,QAAA,gBACPJ,OAAA,CAACN,KAAK;UAACW,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEN,OAAA,CAACT,KAAK;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrCV,OAAA,CAACN,KAAK;UAACW,IAAI,EAAC,QAAQ;UAACC,OAAO,eAAEN,OAAA,CAACT,KAAK;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1CV,OAAA,CAACN,KAAK;UAACW,IAAI,EAAC,eAAe;UAACC,OAAO,eAAEN,OAAA,CAACF,YAAY;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACvDV,OAAA,CAACN,KAAK;UAACW,IAAI,EAAC,QAAQ;UAACC,OAAO,eAAEN,OAAA,CAACJ,KAAK;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACzCV,OAAA,CAACN,KAAK;UAACW,IAAI,EAAC,UAAU;UAACC,OAAO,eAAEN,OAAA,CAACH,OAAO;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAErC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBAMP,CAAC;AAET;AAACC,EAAA,GApBQR,GAAG;AAsBZ,eAAeA,GAAG;;AAIlB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}